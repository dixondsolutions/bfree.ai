import { NextResponse } from 'next/server'\nimport { createClient } from '@/lib/supabase/server'\nimport { getCurrentUser } from '@/lib/database/utils'\n\nexport async function GET() {\n  try {\n    const debugInfo: any = {\n      timestamp: new Date().toISOString(),\n      environment: process.env.NODE_ENV,\n      supabase: {\n        connected: false,\n        user: null,\n        error: null\n      },\n      database: {\n        tables: [],\n        errors: []\n      },\n      apis: {\n        tasksEndpoint: null,\n        suggestionsEndpoint: null\n      }\n    }\n\n    // Test Supabase connection\n    try {\n      const user = await getCurrentUser()\n      debugInfo.supabase.connected = true\n      debugInfo.supabase.user = user ? { id: user.id, email: user.email } : null\n    } catch (error) {\n      debugInfo.supabase.error = error instanceof Error ? error.message : 'Unknown error'\n    }\n\n    // Test database tables\n    if (debugInfo.supabase.connected) {\n      const supabase = await createClient()\n      \n      // Test tasks table\n      try {\n        const { data: tasks, error } = await supabase\n          .from('tasks')\n          .select('id, title, status, created_at')\n          .limit(5)\n        \n        debugInfo.database.tables.push({\n          name: 'tasks',\n          status: 'ok',\n          count: tasks?.length || 0,\n          sample: tasks?.slice(0, 2) || []\n        })\n      } catch (error) {\n        debugInfo.database.errors.push(`tasks: ${error}`)\n      }\n\n      // Test ai_suggestions table\n      try {\n        const { data: suggestions, error } = await supabase\n          .from('ai_suggestions')\n          .select('id, title, status, suggested_time, confidence_score')\n          .limit(5)\n        \n        debugInfo.database.tables.push({\n          name: 'ai_suggestions',\n          status: 'ok',\n          count: suggestions?.length || 0,\n          sample: suggestions?.slice(0, 2) || []\n        })\n      } catch (error) {\n        debugInfo.database.errors.push(`ai_suggestions: ${error}`)\n      }\n    }\n\n    // Test API endpoints\n    try {\n      const baseUrl = process.env.VERCEL_URL \n        ? `https://${process.env.VERCEL_URL}` \n        : 'http://localhost:3000'\n      \n      // Test tasks API\n      const tasksResponse = await fetch(`${baseUrl}/api/tasks?limit=1`)\n      debugInfo.apis.tasksEndpoint = {\n        status: tasksResponse.status,\n        ok: tasksResponse.ok,\n        data: tasksResponse.ok ? await tasksResponse.json() : null\n      }\n    } catch (error) {\n      debugInfo.apis.tasksEndpoint = {\n        error: error instanceof Error ? error.message : 'Unknown error'\n      }\n    }\n\n    return NextResponse.json({\n      success: true,\n      debug: debugInfo\n    })\n\n  } catch (error) {\n    return NextResponse.json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown error',\n      stack: error instanceof Error ? error.stack : undefined\n    }, { status: 500 })\n  }\n} 